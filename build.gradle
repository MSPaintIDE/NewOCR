buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

plugins {
    id 'java'
}

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}

apply plugin: 'io.codearte.nexus-staging'

group 'com.uddernetworks.newocr'
archivesBaseName = "NewOCR"
version '2.0.0'

sourceCompatibility = 12

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
    testCompile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile group: 'org.bitbucket.cowwoc', name: 'diff-match-patch', version: '1.2'

    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.7.8'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'

    // https://mvnrepository.com/artifact/org.hsqldb/hsqldb
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.1'

    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'

    compile group: 'com.typesafe', name: 'config', version: '1.3.3'
}

ext.moduleName = 'NewOCR'

tasks.withType(Test)  {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

test {
    minHeapSize = "1024m"
    maxHeapSize = "61446m"
    forkEvery = 1
}

javadoc {
    options.addStringOption('-module-path', classpath.asPath)
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

compileJava {
    inputs.property('moduleName', moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

nexusStaging {
    if (project.hasProperty("ossrhUser") && project.hasProperty("ossrhPassword")) {
        username = ossrhUser
        password = ossrhPassword
    }
}

javadoc {
    failOnError = false
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

apply plugin: 'signing'
apply plugin: 'maven'

// Signature of artifacts
signing {
    sign configurations.archives
}

// -Prelease uploadArchives closeAndPromoteRepository -x demo:uploadArchives

// OSSRH publication
uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (project.hasProperty("ossrhUser") && project.hasProperty("ossrhPassword")) {
                // Target repository
                String repo = version.toString().endsWith("-SNAPSHOT") ?
                        "https://oss.sonatype.org/content/repositories/snapshots" :
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                println "Using repository ${repo}"
                repository(url: repo) {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }
            }

            pom.project {
                name 'NewOCR'
                description 'NewOCR is a library for simple but efficient OCR detection in pure Java.'
                packaging 'jar'
                url 'https://github.com/MSPaintIDE/NewOCR'

                scm {
                    connection 'scm:git:https://github.com/MSPaintIDE/NewOCR.git'
                    developerConnection 'scm:git:git@github.com:MSPaintIDE/NewOCR.git'
                    url 'https://github.com/MSPaintIDE/NewOCR.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'RubbaBoy'
                        name = 'Adam Yarris'
                        email = 'adamyarris@gmail.com'
                    }
                }
            }
        }
    }
}